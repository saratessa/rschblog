{
  "hash": "d16bf7a604a9e8c9fa2c9eebf7ced335",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Exploring Precision Teaching (PT) Math pinpoints\"\nauthor: \"Saratessa\"\ndate: \"2025-02-27\"\ncategories: [Precision Teaching, Math Instruction, Clustering]\n---\n\n\n\nThis following post utilized data from a private precision teaching clinic in the United States. Each student in this data has a score for accuracy and fluency of math pinpoints at intake and then their score for those skills on a CBM after 40 hours of instruction.\n\nThis report includes: **Sample visualizations** to understand the sample of participants. **Data reshaping** to convert the dataset into a tidy format. **Analysis for three research questions** using clustering, regression, and ANCOVA.\n\n**###Research Questions and Methods:###**\n\n1.  **What math skills, when grouped, predict other skills?**\n\n    -   First **Hierarchical clustering** is used to identify skill groupings based on similar learning patterns.\n\n2.  **What math skills predict outcomes on the CBM after 40 hours of instruction?**\n\n    -   Next **multiple regression modeling** is applied to determine predictive relationships.\n\n3.  **How do targeted versus untargeted math skills relate to CBM outcomes?**\n\n    -   **ANCOVA (Analysis of Covariance)** is used to examine differences between these skill types.\n\nBefore loading the dataset, I cleaned it in a separate script to remove names and replace them with unique ID numbers for student privacy.\n\nIn this project, the first step I took was to load all required R packages. For data manipulation (`tidyverse`), visualizations (`ggplot2`), clustering analysis (`cluster`), tidying model outputs (`broom`), and running regression models (`lme4`).\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.4     ✔ tidyr     1.3.1\n✔ purrr     1.0.4     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n```\n\n\n:::\n\n```{.r .cell-code}\nlibrary(ggplot2)\nlibrary(cluster)\nlibrary(broom)\nlibrary(lme4)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nLoading required package: Matrix\n\nAttaching package: 'Matrix'\n\nThe following objects are masked from 'package:tidyr':\n\n    expand, pack, unpack\n```\n\n\n:::\n:::\n\n\n\n\nHere are the visualizations of the sample participants. \n\n\n::: {.cell}\n\n```{.r .cell-code}\n### Students With vs. Without Diagnosis\ndf %>% \n  mutate(Has_Diagnosis = ifelse(Diagnosis == \"None\" | is.na(Diagnosis), \"No Diagnosis\", \"Has Diagnosis\")) %>%\n  count(Has_Diagnosis) %>%\n  ggplot(aes(x = Has_Diagnosis, y = n, fill = Has_Diagnosis)) +\n  geom_bar(stat = \"identity\", color = \"black\") +\n  labs(title = \"Students With vs. Without Diagnosis\",\n       x = \"Diagnosis Status\",\n       y = \"Count\") +\n  scale_fill_manual(values = c(\"#FFC0CB\", \"#800080\"))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-3-1.png){width=672}\n:::\n\n```{.r .cell-code}\n### Grade Level Distribution\ndf %>%\n  filter(!is.na(`Grade Level`)) %>%\n  count(`Grade Level`) %>%\n  ggplot(aes(x = reorder(`Grade Level`, n), y = n)) +\n  geom_bar(stat = \"identity\", fill = \"#800080\", color = \"black\") +\n  labs(title = \"Grade Level Distribution\",\n       x = \"Grade Level\",\n       y = \"Count\") +\n  coord_flip()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-3-2.png){width=672}\n:::\n\n```{.r .cell-code}\n### Diagnosis Type Count\ndf %>%\n  mutate(Diagnosis_Category = case_when(\n    Diagnosis == \"Mood Disorder - Anxiety (e.g. selective mutism, anxiety, GAD)\" ~ \"Mood Disorder\",\n    Diagnosis == \"Learning Disability - Speech and language - Speech delay\" ~ \"Learning Disability\",\n    Diagnosis == \"None\" | is.na(Diagnosis) ~ \"None\"\n  )) %>%\n  count(Diagnosis_Category) %>%\n  ggplot(aes(x = Diagnosis_Category, y = n, fill = Diagnosis_Category)) +\n  geom_col(color = \"black\") +\n  labs(title = \"Diagnosis Type Count\",\n       x = \"Diagnosis Type\",\n       y = \"Count\") +\n  scale_fill_manual(values = c(\"#FFC0CB\", \"#800080\", \"gray\"))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-3-3.png){width=672}\n:::\n:::\n\n\n\n## Reshape Data to Tidy Format\n\n[edit this now that changes were made\\]I reshaped the dataset to a \"tidy\" format, where each row represents: Participant_ID, Grade Level, Diagnosis, Skill, Measure\\` (Intake Accuracy, Post Fluency, etc.), Score. I converted categorical variables to factors to avoid regression errors. And I removed levels with only one category to prevent contrast errors in regression.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Start with clean data (row 4 onwards)\nclean_df <- df[4:nrow(df), ]\n\n# Step 2: Create proper column names by combining rows 1 and 2\ncol_names_skill <- as.character(unlist(df[1, ]))\ncol_names_assessment <- as.character(unlist(df[2, ]))\n\n# Fix any NA or empty values in column names\ncol_names_skill <- ifelse(is.na(col_names_skill) | col_names_skill == \"\", paste0(\"Column_\", 1:length(col_names_skill)), col_names_skill)\ncol_names_assessment <- ifelse(is.na(col_names_assessment) | col_names_assessment == \"\", \"Unknown\", col_names_assessment)\n\n# Create combined names for all columns\nfull_col_names <- vector(\"character\", length(col_names_skill))\nfor(i in 1:length(col_names_skill)) {\n  if(i <= 3) {\n    # Keep the original names for the first three columns\n    full_col_names[i] <- col_names_skill[i]\n  } else {\n    # Combine skill and assessment type for data columns\n    full_col_names[i] <- paste(col_names_skill[i], col_names_assessment[i], sep = \"_\")\n  }\n}\n\n# Make sure all column names are unique\nif(any(duplicated(full_col_names))) {\n  # Add a suffix to duplicated names\n  dups <- which(duplicated(full_col_names))\n  for(i in dups) {\n    full_col_names[i] <- paste0(full_col_names[i], \"_\", i)\n  }\n}\n\n# Assign the new column names\ncolnames(clean_df) <- full_col_names\n\n# Step 3: Convert to tidy format\ntidy_df <- clean_df %>%\n  # Convert character columns to numeric (except first 3 columns)\n  mutate(across(4:ncol(.), ~as.numeric(as.character(.)))) %>%\n  # Convert to long format\n  pivot_longer(\n    cols = 4:ncol(.),\n    names_to = \"Skill_Measure\",\n    values_to = \"Score\"\n  ) %>%\n  # Split Skill_Measure into Skill and Measure\n  # Use a more flexible pattern to handle different formats\n  separate(Skill_Measure, \n           into = c(\"Skill\", \"Measure\"),\n           sep = \"_(?=(Intake|Post|Targeted)($|_))\",  # Split before Intake, Post, or Targeted\n           fill = \"right\") %>%  # Handle any missing values\n  # Remove any trailing/leading whitespace\n  mutate(\n    Skill = trimws(Skill),\n    Measure = trimws(Measure)\n  )\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: There were 5 warnings in `mutate()`.\nThe first warning was:\nℹ In argument: `across(4:ncol(.), ~as.numeric(as.character(.)))`.\nCaused by warning:\n! NAs introduced by coercion\nℹ Run `dplyr::last_dplyr_warnings()` to see the 4 remaining warnings.\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Check the number of NAs in the Score column\nna_count <- sum(is.na(tidy_df$Score))\ntotal_count <- nrow(tidy_df)\nna_percentage <- (na_count / total_count) * 100\n\n# Print summary\ncat(\"Total rows:\", total_count, \"\\n\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nTotal rows: 124200 \n```\n\n\n:::\n\n```{.r .cell-code}\ncat(\"NA values in Score:\", na_count, \"\\n\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nNA values in Score: 47403 \n```\n\n\n:::\n\n```{.r .cell-code}\ncat(\"Percentage NA:\", na_percentage, \"%\\n\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nPercentage NA: 38.16667 %\n```\n\n\n:::\n\n```{.r .cell-code}\n# See what the tidy data looks like\nhead(tidy_df)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 6\n  Column_1 Column_2 Column_3  Skill                                Measure Score\n     <dbl> <chr>    <chr>     <chr>                                <chr>   <dbl>\n1        3 None     2nd Grade Skip Count by 10 Forwards to 1,000 … <NA>       84\n2        3 None     2nd Grade Skip Count by 10 Forwards to 1,000 … <NA>      100\n3        3 None     2nd Grade Skip Count by 10 Forwards to 1,000 … <NA>       92\n4        3 None     2nd Grade Skip Count by 10 Forwards to 1,000 … <NA>      100\n5        3 None     2nd Grade Skip Count by 10 Forwards to 1,000 … <NA>        0\n6        3 None     2nd Grade Skip Count by 10 Backwards From 1,0… <NA>       NA\n```\n\n\n:::\n:::\n\n\n\n////// \\## Answer Research Questions\n\n### **Q1: What math skills, when grouped, predict other skills?**\n\nto address this I used a **Correlation analysis** to identify skills that **improve together**. Then I did **Association rule mining** to find patterns where mastering one skill predicts mastery of another. I then created the following visualizations: a **correlation heatmap** and **association rule graph**.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create a correlation matrix for skill scores\n\n\n# Visualize correlation matrix\n```\n:::\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}